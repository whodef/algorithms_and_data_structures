"""
J. Сумма четвёрок

_____________________________________________________________________________________________________
| Язык                    | Ограничение времени | Ограничение памяти |   Ввод        |   Вывод      |
_____________________________________________________________________________________________________
| Все языки               | 2 секунды           | 128Mb              |               |              |
| Node.js 14.15.5         | 2 секунды           | 170Mb              |               |              |
| Python 3.7.3            | 2 секунды           | 170Mb              | стандартный   | стандартный  |
| Oracle Java 8           | 3.2 секунды         | 170Mb              | ввод или      | вывод или    |
| OpenJDK Java 11         | 3.2 секунды         | 170Mb              | input.txt     | output.txt   |
| C# (MS .NET 6.0 + ASP)  | 3.2 секунды         | 170Mb              |               |              |
| C# (MS .NET 5.0 + ASP)  | 3.2 секунды         | 170Mb              |               |              |
| Node JS 8.16            | 2 секунды           | 170Mb              |               |              |
_____________________________________________________________________________________________________

У Гоши есть любимое число S. Помогите ему найти все уникальные четвёрки чисел в массиве, которые в
сумме дают заданное число S.



Формат ввода:
В первой строке дано общее количество элементов массива n (0 ≤ n ≤ 1000).

Во второй строке дано целое число S |S| =< 10^9.

В третьей строке задан сам массив. Каждое число является целым и не превосходит по модулю 109.



Формат вывода:
В первой строке выведите количество найденных четвёрок чисел.

В последующих строках выведите найденные четвёрки. Числа внутри одной четверки должны быть упорядочены
по возрастанию. Между собой четвёрки упорядочены лексикографически.
"""

from collections import defaultdict


def calculate_four_sum():
    # Число элементов в массиве
    n = int(input())
    if n < 4:  # Если элементов меньше 4, то сумму 4 чисел невозможно вычислить
        print(0)
        return

    # Целевая сумма
    s = int(input())

    # Ввод чисел
    numbers = list(map(int, input().split()))

    # Результаты, хранящие уникальные четверки чисел, дающих сумму s
    result = set()

    # Словарь для хранения известных сумм двух чисел и соответствующих пар чисел
    known_sums = defaultdict(list)

    # Добавляем первую пару в known_sums
    known_sums[numbers[0] + numbers[1]].append((numbers[0], numbers[1]))

    # Перебираем все возможные пары чисел в массиве
    for i in range(2, n - 1):
        for j in range(i + 1, n):
            # Вычисляем требуемую сумму для текущей пары чисел
            required_sum = s - numbers[i] - numbers[j]

            # Если требуемая сумма есть в known_sums, добавляем все четверки чисел в result
            if required_sum in known_sums:
                for pair in known_sums[required_sum]:
                    result.add(tuple(sorted((*pair, numbers[i], numbers[j]))))

        # Добавляем все возможные суммы текущего числа и предыдущих чисел в known_sums
        for j in range(i):
            known_sums[numbers[i] + numbers[j]].append((numbers[i], numbers[j]))

    # Выводим количество уникальных четверок чисел и сами четверки
    print(len(result))
    for quad in sorted(result):
        print(' '.join(map(str, quad)))


if __name__ == '__main__':
    calculate_four_sum()
