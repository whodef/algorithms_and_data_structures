"""
E. Подстроки

_____________________________________________________________________________________________________
| Язык                    | Ограничение времени | Ограничение памяти |   Ввод        |   Вывод      |
_____________________________________________________________________________________________________
| Все языки               | 0.077 секунд        | 4Mb                |               |              |
| Node.js 14.15.5         | 0.1 секунда         | 64Mb               | стандартный   | стандартный  |
| OpenJDK Java 11         | 0.3 секунды         | 64Mb               | ввод или      | вывод или    |
| C# (MS .NET 6.0 + ASP)  | 0.3 секунды         | 64Mb               | input.txt     | output.txt   |
| C# (MS .NET 5.0 + ASP)  | 0.3 секунды         | 64Mb               |               |              |
_____________________________________________________________________________________________________

На вход подается строка. Нужно определить длину наибольшей подстроки, которая не содержит повторяющиеся символы.


Формат ввода:
Одна строка, состоящая из строчных латинских букв. Длина строки не превосходит 10 000.


Формат вывода:
Выведите натуральное число —– ответ на задачу.
"""


# Функция main() создает переменные max_length (длина наибольшей подстроки без повторяющихся символов),
# left (левая граница текущей подстроки без повторяющихся символов) и словарь char_indexes
# (хранит последние индексы символов в строке).
def main():
    s = input().strip()
    n = len(s)
    max_length = 0
    left = 0
    char_indexes = {}

    # В цикле проходит по всем символам строки, обновляя левую границу подстроки left, если
    # текущий символ уже встречался в текущей подстроке. Затем обновляет значение max_length,
    # и сохраняет индекс текущего символа в словаре char_indexes.
    for right in range(n):
        char = s[right]
        if char in char_indexes and char_indexes[char] >= left:
            left = char_indexes[char] + 1
        char_indexes[char] = right
        max_length = max(max_length, right - left + 1)

    print(max_length)


if __name__ == '__main__':
    main()
