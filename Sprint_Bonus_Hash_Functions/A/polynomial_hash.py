"""
A. Полиномиальный хеш

____________________________________________________________
|                      | Все языки     | Python 3.7.3      |
____________________________________________________________
| Ограничение времени  | 0.5 секунд    | 0.65 секунд       |
____________________________________________________________
| Ограничение памяти   | 64Mb          | 64Mb              |
____________________________________________________________
| Ввод                 | стандартный ввод или input.txt    |
____________________________________________________________
| Вывод                | стандартный вывод или output.txt  |
____________________________________________________________

Алле очень понравился алгоритм вычисления полиномиального хеша. Помогите ей написать функцию, вычисляющую хеш строки s.
В данной задаче необходимо использовать в качестве значений отдельных символов их коды в таблице ASCII.

Полиномиальный хеш считается по формуле:
h = hash(s0..n-1) = s0 + ps1 + p^2s2 +… + p^(n-1)sn-1


Формат ввода:
В первой строке дано число a (1 ≤ a ≤ 1000) –— основание, по которому считается хеш.

Во второй строке дано число m (1 ≤ m ≤ 109) –— модуль.

В третьей строке дана строка s (0 ≤ |s| ≤ 106), состоящая из больших и маленьких латинских букв.


Формат вывода:
Выведите целое неотрицательное число –— хеш заданной строки.
"""


# Функция hash_string вычисляет полиномиальный хеш для строки input_string
def hash_string(a, m, input_string):
    # Начинаем с последнего символа строки и находим его ASCII код
    tmp = ord(input_string[-1])
    # Инициализируем переменную length для хранения степени основания a
    length = a
    # Итерируемся по символам строки с конца до начала
    for c in input_string[-2::-1]:
        # Обновляем значение хеша, добавляя ASCII код текущего символа, умноженный на соответствующую степень основания a
        tmp = (tmp + ord(c) * length) % m
        # Обновляем степень основания a, умножая ее на a и применяя модуль m
        length = (length * a) % m
    # Выводим вычисленный хеш
    print(tmp % m)


# Точка входа в программу
if __name__ == '__main__':
    # Считываем значение основания a
    a = int(input())
    # Считываем значение модуля m
    m = int(input())
    # Считываем вводимую строку input_string
    input_string = input()
    # Если строка пустая, выводим 0, так как хеш пустой строки равен 0
    if input_string == '':
        print(0)
    # В противном случае вызываем функцию hash_string с введенными значениями a, m и input_string
    else:
        hash_string(a, m, input_string)
