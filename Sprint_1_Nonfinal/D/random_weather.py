"""
D. Хаотичность погоды

__________________________________________________________________________________________________________
| Язык                  | Ограничение времени  |  Ограничение памяти  |  Ввод           |  Вывод         |
__________________________________________________________________________________________________________
| Все языки             | 0.2 секунды          |  64Mb                |                 |                |
| C# (MS .Net 5.0)+ASP  | 0.5 секунд           |  64Mb                |  стандартный    |  стандартный   |
| Oracle Java 8         | 0.5 секунд           |  64Mb                |  ввод или       |  ввод или      |
| OpenJDK Java 11       | 0.5 секунд           |  64Mb                |  input.txt      |  output.txt    |
| Kotlin 1.8.0 (JRE 11) | 0.6 секунд           |  64Mb                |                 |                |
__________________________________________________________________________________________________________

Метеорологическая служба вашего города решила исследовать погоду новым способом.

Под температурой воздуха в конкретный день будем понимать максимальную температуру в этот день.
Под хаотичностью погоды за n дней служба понимает количество дней, в которые температура строго больше, чем в день
до (если такой существует) и в день после текущего (если такой существует). Например, если за 5 дней максимальная
температура воздуха составляла [1, 2, 5, 4, 8] градусов, то хаотичность за этот период равна 2: в 3-й и 5-й дни
выполнялись описанные условия.
Определите по ежедневным показаниям температуры хаотичность погоды за этот период.

Заметим, что если число показаний n=1, то единственный день будет хаотичным.

Формат ввода:
В первой строке дано число n — длина периода измерений в днях, 1 ≤ n≤ 105. Во второй строке даны n целых чисел —
значения температуры в каждый из n дней. Значения температуры не превосходят 273 по модулю.

Формат вывода:
Выведите единственное число — хаотичность за данный период.
"""

from typing import List


def get_weather_randomness(temperatures: List[int]) -> int:
    n = len(temperatures)
    if n == 1:
        return 1

    randomness = 0
    for i in range(n):
        if i == 0:
            if temperatures[i] > temperatures[i + 1]:
                randomness += 1
        elif i == n - 1:
            if temperatures[i] > temperatures[i - 1]:
                randomness += 1
        else:
            if temperatures[i] > temperatures[i - 1] and temperatures[i] > temperatures[i + 1]:
                randomness += 1

    return randomness


def read_input() -> List[int]:
    n = int(input())
    temperatures = list(map(int, input().strip().split()))
    return temperatures


temperatures = read_input()

print(get_weather_randomness(temperatures))


# Функция get_weather_randomness получает на вход список temperatures, содержащий n целых чисел, которые представляют
# значения температуры воздуха в каждый из n дней.
#
# В первую очередь, функция проверяет, что длина списка temperatures больше 1.
# Если это не так (, если n равно 1), то функция возвращает 1, так как единственный день является хаотичным
# по определению.
#
# Затем функция создает пустой список chaotic_days, содержащий дни, в которых температура воздуха была хаотичной.
#
# Далее функция проходит по списку temperatures в цикле, начиная со второго элемента и заканчивая предпоследним,
# потому что мы проверяем каждый элемент относительно предыдущего и следующего.
#
# Для каждого элемента списка temperatures функция сравнивает его со значением предыдущего и следующего элементов.
# Если текущее значение больше и предыдущее значение, и следующее значение, то это означает, что температура воздуха
# была хаотичной в этот день. В этом случае функция добавляет индекс текущего элемента в список chaotic_days.
#
# После того как функция проверила все элементы списка temperatures, она возвращает длину списка chaotic_days,
# равную количеству дней, в которых температура воздуха была хаотичной.
#
# Функция read_input просто считывает входные данные из стандартного ввода и возвращает список temperatures.
#
# Затем мы считываем данные в список temperatures с помощью функции read_input, и вызываем функцию
# get_weather_randomness, передавая ей список temperatures. Результат работы функции выводится на экран с
# помощью команды print.
