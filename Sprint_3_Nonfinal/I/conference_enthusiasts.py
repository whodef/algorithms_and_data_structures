"""
I. Любители конференций

___________________________________________________________________________________________________
| Язык                   | Ограничение времени | Ограничение памяти |  Ввод        |  Вывод       |
___________________________________________________________________________________________________
| Все языки              | 0.08 секунд         | 39Mb               |              |              |
| Node.js 14.15.5        | 0.5 секунд          | 64Mb               | стандартный  | стандартный  |
| Python 3.7.3           | 0.5 секунд          | 64Mb               | ввод или     | ввод или     |
| OpenJDK Java 11        | 0.5 секунд          | 64Mb               | input.txt    | output.txt   |
| C# (MS .NET 6.0 + ASP) | 0.5 секунд          | 64Mb               |              |              |
| C# (MS .NET 5.0 + ASP) | 0.5 секунд          | 64Mb               |              |              |
___________________________________________________________________________________________________

На IT-конференции присутствовали студенты из разных вузов со всей страны. Для каждого студента известен ID
университета, в котором он учится.

Тимофей предложил Рите выяснить, из каких k вузов на конференцию пришло больше всего учащихся.


Формат ввода:
В первой строке дано количество студентов в списке —– n (1 ≤ n ≤ 15 000).

Во второй строке через пробел записаны n целых чисел —– ID вуза каждого студента. Каждое из чисел находится в
диапазоне от 0 до 10 000.

В третьей строке записано одно число k.


Формат вывода:
Выведите через пробел k ID вузов с максимальным числом участников. Они должны быть отсортированы по убыванию
популярности (по количеству гостей от конкретного вуза). Если более одного вуза имеет одно и то же количество
учащихся, то выводить их ID нужно в порядке возрастания.
"""

if __name__ == '__main__':
    n = int(input())
    ids = list(map(int, input().split()))
    k = int(input())

    count = {}
    for id in ids:
        count[id] = count.get(id, 0) + 1

    sorted_ids = sorted(count, key=lambda x: (-count[x], x))
    top_k = sorted_ids[:k]

    print(*top_k)
