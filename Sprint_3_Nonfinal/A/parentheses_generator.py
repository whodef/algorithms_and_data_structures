"""
A. Генератор скобок

___________________________________________________________________________________________________
| Язык                   | Ограничение времени | Ограничение памяти |  Ввод        |  Вывод       |
___________________________________________________________________________________________________
| Все языки              | 1 секунда           | 64Mb               |              |              |
| OpenJDK Java 11        | 1.5 секунд          | 64Mb               | стандартный  | стандартный  |
| C# (MS .NET 6.0 + ASP) | 1.5 секунд          | 64Mb               | ввод или     | ввод или     |
| C# (MS .NET 5.0 + ASP) | 1.5 секунд          | 64Mb               | input.txt    | output.txt   |
___________________________________________________________________________________________________

Рита по поручению Тимофея наводит порядок в правильных скобочных последовательностях (ПСП), состоящих только из
круглых скобок (). Для этого ей надо сгенерировать все ПСП длины 2n в алфавитном порядке —– алфавит состоит
из ( и ) и открывающая скобка идёт раньше закрывающей.

Помогите Рите —– напишите программу, которая по-заданному n выведет все ПСП в нужном порядке.

Рассмотрим второй пример. Надо вывести ПСП из четырёх символов. Таких всего две:

1. (())
2. ()()

(()) идёт раньше ()(), так как первый символ у них одинаковый, а на второй позиции у первой ПСП стоит
(, который идёт раньше ).

Формат ввода:
На вход функция принимает n — целое число от 0 до 10.

Формат вывода:
Функция должна напечатать все возможные скобочные последовательности заданной длины в
алфавитном (лексикографическом) порядке.
"""


def generate_parentheses(n):
    result = []

    def generate(s, open_count, close_count):
        if len(s) == 2 * n:
            result.append(s)
            return

        if open_count < n:
            generate(s + '(', open_count + 1, close_count)

        if close_count < open_count:
            generate(s + ')', open_count, close_count + 1)

    generate('', 0, 0)
    return result


n = int(input())
for p in generate_parentheses(n):
    print(p)
