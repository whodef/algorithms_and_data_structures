"""
D. Заботливая мама

____________________________________________________________
| Ограничение времени  | 1 секунда                         |
| Ограничение памяти   | 64Mb                              |
| Ввод                 | стандартный ввод или input.txt    |
| Вывод                | стандартный вывод или output.txt  |
____________________________________________________________

Мама Васи хочет знать, что сын планирует делать и когда. Помогите ей: напишите функцию solution, определяющую индекс
первого вхождения передаваемого ей на вход значения в связном списке, если значение присутствует.
Внимание: в этой задаче не нужно считывать входные данные. Нужно написать только функцию, которая принимает на вход
голову списка и искомый элемент, а возвращает целое число — индекс найденного элемента или -1.

Решение надо отправлять только в виде файла с расширением, которое соответствует вашему языку. Иначе даже корректно
написанное решение не пройдет тесты.

Формат ввода:
Функция на вход принимает голову односвязного списка и элемент, который нужно найти. Длина списка не превосходит 10000
элементов. Список не бывает пустым.
Следуйте следующим правилам при отправке решений:

По умолчанию выбран компилятор Make, выбор компилятора в данной задаче недоступен.
Решение нужно отправлять в виде файла с расширением соответствующем вашему языку программирования.
Для Java файл должен называться Solution.java, для C# – Solution.cs
Для остальных языков программирования это имя использовать нельзя (имя «solution» тоже).
Для Go укажите package main.

Формат вывода:
Функция возвращает индекс первого вхождения искомого элемента в список(индексация начинается с нуля). Если элемент
не найден, нужно вернуть -1.
"""


# ! change LOCAL to False before submitting !
# set LOCAL to True for local testing

LOCAL = False

if LOCAL:
    class Node:
        def __init__(self, value, next_item=None):
            self.value = value
            self.next_item = next_item


def solution(node, elem):
    # Your code
    # ヽ(´▽`)/
    index = 0
    while node is not None:
        if node.value == elem:
            return index
        node = node.next_item
        index += 1
    return -1


def test():
    node3 = Node('node3', None)
    node2 = Node('node2', node3)
    node1 = Node('node1', node2)
    node0 = Node('node0', node1)
    idx = solution(node0, 'node2')
    assert idx == 2


if __name__ == '__main__':
    test()
