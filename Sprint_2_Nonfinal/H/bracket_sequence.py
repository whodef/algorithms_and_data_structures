"""
H. Скобочная последовательность

_____________________________________________________________________________________________________
| Язык                    | Ограничение времени | Ограничение памяти |   Ввод        |   Вывод      |
_____________________________________________________________________________________________________
| Все языки               | 0.1 секунда         | 64Mb               |               |              |
| Node.js 14.15.5         | 1 секунда           | 64Mb               |               |              |
| Python 3.7.3            | 1 секунда           | 64Mb               | стандартный   | стандартный  |
| OpenJDK Java 11         | 1 секунда           | 64Mb               | ввод или      | вывод или    |
| C# (MS .NET 6.0 + ASP)  | 1 секунда           | 64Mb               | input.txt     | output.txt   |
| C# (MS .NET 5.0 + ASP)  | 1 секунда           | 64Mb               |               |              |
_____________________________________________________________________________________________________

Вот какую задачу Тимофей предложил на собеседовании одному из кандидатов. Если вы с ней ещё не сталкивались, то
наверняка столкнётесь –— она довольно популярная.

Дана скобочная последовательность. Нужно определить, правильная ли она.

Будем придерживаться такого определения:

- пустая строка —– правильная скобочная последовательность;
- правильная скобочная последовательность, взятая в скобки одного типа, –— правильная скобочная последовательность;
- правильная скобочная последовательность с приписанной слева или справа правильной скобочной
последовательностью – тоже правильная.

На вход подаётся последовательность из скобок трёх видов: [], (), {}.
Напишите функцию is_correct_bracket_seq, которая принимает на вход скобочную последовательность и возвращает True,
если последовательность правильная, а иначе False.

Формат ввода:
На вход подаётся одна строка, содержащая скобочную последовательность. Скобки записаны подряд, без пробелов.

Формат вывода:
Выведите «True» или «False».
"""

brackets = {'(': ')', '{': '}', '[': ']'}


def is_correct_bracket_seq(line):
    open_brackets = []

    for i in line:
        if i in brackets.keys():

            open_brackets.append(i)
        else:
            if not open_brackets:
                return False

            if i != brackets[open_brackets.pop()]:
                return False

    return not open_brackets


print(is_correct_bracket_seq(input()))
