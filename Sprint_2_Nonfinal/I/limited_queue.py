"""
I. Ограниченная очередь

____________________________________________________________
| Ограничение времени  | 0.3 секунды                       |
| Ограничение памяти   | 64Mb                              |
| Ввод                 | стандартный ввод или input.txt    |
| Вывод                | стандартный вывод или output.txt  |
____________________________________________________________

Астрологи объявили день очередей ограниченного размера. Тимофею нужно написать класс MyQueueSized, который
принимает параметр max_size, означающий максимально допустимое количество элементов в очереди.

Помогите ему —– реализуйте программу, которая будет эмулировать работу такой очереди. Функции, которые надо
поддержать, описаны в формате ввода.

Формат ввода:
В первой строке записано одно число — количество команд, оно не превосходит 5000.
Во второй строке задан максимально допустимый размер очереди, он не превосходит 5000.

Далее идут команды по одной на строке. Команды могут быть следующих видов:
- push(x) — добавить число x в очередь;
- pop() — удалить число из очереди и вывести на печать;
- peek() — напечатать первое число в очереди;
- size() — вернуть размер очереди;

При превышении допустимого размера очереди нужно вывести «error». При вызове операций pop() или peek() для пустой
очереди нужно вывести «None».

Формат вывода:
Напечатайте результаты выполнения нужных команд, по одному на строке.
"""


class MyQueueSized:
    def __init__(self, max_size):
        self.max_size = max_size
        self.queue = []  # инициализация пустой очереди

    def push(self, x):
        if len(self.queue) < self.max_size:  # проверяем, что есть место в очереди
            self.queue.append(x)
        else:
            print('error')

    def pop(self):
        if len(self.queue) == 0:  # проверяем, что очередь не пуста
            print('None')
        else:
            print(self.queue.pop(0))  # извлекаем и выводим первый элемент очереди

    def peek(self):
        if len(self.queue) == 0:  # проверяем, что очередь не пуста
            print('None')
        else:
            print(self.queue[0])  # выводим первый элемент очереди

    def size(self):
        print(len(self.queue))  # выводим текущий размер очереди


n = int(input())  # количество команд
max_size = int(input())  # максимальный размер очереди

queue = MyQueueSized(max_size)  # создаем объект очереди

for i in range(n):
    command = input().split()

    if command[0] == 'push':
        queue.push(int(command[1]))
    elif command[0] == 'pop':
        queue.pop()
    elif command[0] == 'peek':
        queue.peek()
    elif command[0] == 'size':
        queue.size()
