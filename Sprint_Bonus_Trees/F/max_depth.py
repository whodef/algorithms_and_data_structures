"""
F. Максимальная глубина

_____________________________________________________________
| Ограничение времени   | 1 секунда                         |
| Ограничение памяти    | 64Mb                              |
| Ввод                  | стандартный ввод или input.txt    |
| Вывод                 | стандартный вывод или output.txt  |
_____________________________________________________________

Алла хочет побывать на разных островах архипелага Алгосы. Она составила карту. Карта представлена в виде
дерева: корень обозначает центр архипелага, узлы — другие острова. А листья — это дальние острова, на
которые Алла хочет попасть.

Помогите Алле определить максимальное число островов, через которые ей нужно пройти для совершения одной
поездки от стартового острова до места назначения, включая начальный и конечный пункты.


Формат ввода:

На вход подается корень дерева.
Используйте заготовки кода для данной задачи.


Формат вывода:

Функция должна вернуть число, равное максимальному числу островов в пути (включая начальный и конечный пункты).


Примечания

Выберите компилятор make. Решение нужно отправлять в виде файла с расширением, которое соответствует вашему
языку программирования. Если вы пишете на Java, имя файла должно быть Solution.java. Для остальных языков
назовите файл my_solution.ext, заменив ext на необходимое расширение.
"""


class Node:
    def __init__(self, value, left=None, right=None):
        self.value = value
        self.right = right
        self.left = left


def calc_max_depth(root):
    left_depth = calc_max_depth(root.left) if root.left else 0
    right_depth = calc_max_depth(root.right) if root.right else 0

    return max(left_depth, right_depth) + 1


def solution(root) -> int:
    return calc_max_depth(root)


def test():
    node1 = Node(1)
    node2 = Node(4)
    node3 = Node(3, node1, node2)
    node4 = Node(8)
    node5 = Node(5, node3, node4)

    assert solution(node5) == 3


if __name__ == '__main__':
    test()
