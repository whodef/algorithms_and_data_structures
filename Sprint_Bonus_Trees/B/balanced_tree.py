"""
B. Сбалансированное дерево

_____________________________________________________________
| Ограничение времени   | 1 секунда                         |
| Ограничение памяти    | 64Mb                              |
| Ввод                  | стандартный ввод или input.txt    |
| Вывод                 | стандартный вывод или output.txt  |
_____________________________________________________________

Гоше очень понравилось слушать рассказ Тимофея про деревья. Особенно часть про сбалансированные деревья.
Он решил написать функцию, которая определяет, сбалансировано ли дерево.
Дерево считается сбалансированным, если левое и правое поддеревья каждой вершины отличаются по высоте не
больше, чем на единицу.



Формат ввода:

На вход функции подаётся корень бинарного дерева.

Замечания про отправку решений:
По умолчанию выбран компилятор make. Решение нужно отправлять в виде файла с расширением, которое
соответствует вашему языку программирования. Если вы пишете на Java, имя файла должно быть
Solution.java, для C# – Solution.cs. Для остальных языков назовите файл my_solution.ext,
заменив ext на необходимое расширение.

Используйте заготовки кода для данной задачи, расположенные по ссылкам.



Формат вывода:

Функция должна вернуть True, если дерево сбалансировано в соответствии с критерием из условия, иначе - False.
"""

# ! change LOCAL to False before submitting !
# set LOCAL to True for local testing

LOCAL = False

if LOCAL:
    class Node:
        def __init__(self, value, left=None, right=None):
            self.value = value
            self.right = right
            self.left = left


def solution(root) -> bool:
    #  Your code
    #  “ヽ(´▽｀)ノ”
    pass


def test():
    node1 = Node(1)
    node2 = Node(-5)
    node3 = Node(3, node1, node2)
    node4 = Node(10)
    node5 = Node(2, node3, node4)
    assert solution(node5)


if __name__ == '__main__':
    test()
